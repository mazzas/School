module S_Metamodel_Subset
sig Component {
		performs:			set   Function --  components perform functions  (change "set" to "some" in any signature  to constrain to at least one - run both ways to see the difference)			
}			

sig   Function {
		performedby:	set   Component, -- functions are performed by components
		generates:		set   InputOutput, -- functions generate input/outputs
		receives: 			set   InputOutput --  functions receive input/outputs
}
--Example Local Constraints (remove the "--" preceding the following two lines to include the statements in the executable code, note the differences in simulation output when run with and without them

--{some (generates + receives) -- All actions generate or receive at least one input/output (change "+" to "&" to constrain to "generates AND receives")
--  (some generates implies some receives)} -- If an action generates an input/output, it also receives an input/output

sig InputOutput {
		generatedby:	set  Function, --  input/outputs are generated by functions									
		receivedby: 		set  Function  -- input/outputs are received by functions			
}

-----Reciprocal Relationships-----
fact {performedby = ~ performs}
fact {generatedby = ~ generates}
fact {receivedby = ~ receives}

----- Example Global Constraints to Experiment with-----
--fact { all p_A: Asset | some p_B: Asset - p_A | -- All assets exchange an input/output with at least 
--				some (p_A.performs.receives & p_B.performs.generates  +  --  one other asset through 
--							p_B.performs.receives & p_A.performs.generates) } -- respective performed actions

--fact { all disj p_A, p_B: Asset | -- All assets perform disjoint actions
--				no  (p_A.performs & p_B.performs) }

-----Run Commands----
run {} for 3 but exactly 2 Component -- run with up to 3 elements from each signature, but with exactly 2 components (examining components in pairs)
